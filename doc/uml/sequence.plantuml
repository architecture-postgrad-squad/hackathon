@startuml ""

actor       User      
control     API 
entity      AuthLambda      
note over   AWS_ProcessLambda: TBD: steps flow to use N coordinate lambdas
entity      AWS_ProcessLambda
database    DynamoDB
database    AWS_S3
queue       AWS_SQS  
entity      AWS_SNS
entity      AWS_ValidationLambda
entity      AWS_WriterLambda

User -> API : logs in
activate User
activate API
API -> AuthLambda: requests jwt
activate AuthLambda
AuthLambda -> API: sends jwt
deactivate AuthLambda
User -> API: requests POST /process
API -> AWS_SQS: updates queue
deactivate API

activate AWS_SQS
AWS_SQS -> AWS_ProcessLambda: takes action
deactivate AWS_SQS

loop 
note over AWS_ProcessLambda: steps function implementation
activate AWS_ProcessLambda
AWS_ProcessLambda -> AWS_ProcessLambda: process
end
deactivate AWS_ProcessLambda

loop
    note over AWS_ValidationLambda: if [bucket content == ammount ]  then process_state = 'OK'
    AWS_ValidationLambda -> AWS_S3: verifies bucket content
    activate AWS_S3
    activate AWS_ValidationLambda
    AWS_S3 -> AWS_ValidationLambda: Returns bucket state
    deactivate AWS_S3

    AWS_ValidationLambda -> AWS_SNS: Notifies new process state
    deactivate AWS_ValidationLambda
    activate AWS_SNS
    AWS_SNS -> AWS_WriterLambda: Notifies change in process state
    deactivate AWS_SNS
    activate AWS_WriterLambda
    AWS_WriterLambda -> DynamoDB: updates process register
    activate DynamoDB 
    DynamoDB -> AWS_WriterLambda: returns success
    deactivate DynamoDB
    deactivate AWS_WriterLambda


    alt  [ if process is done]
      activate AWS_ValidationLambda
      AWS_ValidationLambda -> AWS_S3: Verifies bucket content
      activate AWS_S3
      AWS_S3 -> AWS_ValidationLambda: Returns bucket state
      deactivate AWS_S3
      AWS_ValidationLambda -> AWS_SNS: Notifies process is completed
      deactivate AWS_S3
      deactivate AWS_ValidationLambda
      activate AWS_SNS
      AWS_SNS -> User: Notifies user 
      deactivate AWS_SNS
      deactivate User
    end
end
@enduml